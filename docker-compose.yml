version: '3.8'

services:
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant_service
    ports:
      - "6333:6333" # HTTP API
      - "6334:6334" # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage # Persist Qdrant data to a named volume
    environment:
      # Optional: Qdrant specific environment variables
      # QDRANT__SERVICE__API_KEY: "your_qdrant_api_key" # Uncomment and set if you want an API key
      QDRANT__STORAGE__PERSIST_INTERVAL_SEC: 5 # Reduce persist interval for more frequent writes
    restart: unless-stopped # Ensure Qdrant restarts with Docker daemon

  minio:
    image: minio/minio
    container_name: minio_service
    ports:
      - "9000:9000" # MinIO API port
      - "9001:9001" # MinIO Console port
    environment:
      MINIO_ROOT_USER: admin # Set your MinIO root user
      MINIO_ROOT_PASSWORD: password123 # Set your MinIO root password
      MINIO_VOLUMES: /data # Explicitly tell MinIO to use this path for storage
    volumes:
      - minio_data:/data # Persist MinIO data
    command: server /data --console-address ":9001"
    healthcheck: # Add a healthcheck to ensure MinIO is ready before creating buckets
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped # Ensure MinIO restarts with Docker daemon

  minio_setup:
    image: minio/mc # Use the MinIO client image
    container_name: minio_setup_service
    depends_on:
      minio:
        condition: service_started # Keep this as 'service_started'
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for MinIO to be fully ready...'
      # Loop until mc alias set succeeds, indicating MinIO API is responsive
      until /usr/bin/mc alias set myminio http://minio:9000 admin password123;
      do
        echo 'MinIO is not yet ready. Retrying in 5 seconds...'
        sleep 5;
      done;
      echo 'MinIO alias set successfully. Proceeding with bucket creation.'
      
      echo 'Attempting to create rawresumes bucket...'
      /usr/bin/mc mb myminio/rawresumes && echo 'SUCCESS: rawresumes bucket created.' || echo 'ERROR: Failed to create rawresumes bucket.';

      echo 'Attempting to create outputjson bucket...'
      /usr/bin/mc mb myminio/outputjson && echo 'SUCCESS: outputjson bucket created.' || echo 'ERROR: Failed to create outputjson bucket.';

      echo 'Attempting to create rejected-resumes bucket...'
      /usr/bin/mc mb myminio/rejected-resumes && echo 'SUCCESS: rejected-resumes bucket created.' || echo 'ERROR: Failed to create rejected-resumes bucket.';

      echo 'Attempting to create extracted bucket...'
      /usr/bin/mc mb myminio/extracted && echo 'SUCCESS: extracted bucket created.' || echo 'ERROR: Failed to create extracted bucket.';

      echo 'Bucket creation commands sent. Exiting setup service.'
      exit 0;
      "
    networks:
      - default # Ensure it's on the same network as MinIO
          
  etl_pipeline:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: etl_pipeline_app
    volumes:
      - .:/app
    environment:
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      OLLAMA_MODEL: llama3
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: password123
      MINIO_BUCKET_NAME: extracted
      MINIO_OBJECT_NAME: gold_employee_profiles.parquet
      REJECTED_PROFILES_BUCKET_NAME: rejected-resumes # Pass the new bucket name to the ETL pipeline
    depends_on:
      - qdrant
      - minio_setup # Depend on minio_setup to ensure buckets are created
    command: tail -f /dev/null


volumes:
  qdrant_data:
  minio_data: