import os
import shutil
import time
from venv import logger # Still needed for st.cache_resource, but not for reset_triggered_timestamp
from langchain_community.embeddings import SentenceTransformerEmbeddings
from langchain_community.vectorstores import Chroma

# Import configuration from shared module
from shared.config import CHROMA_DB_DIR

def get_vectorstore():
    """
    Initializes or loads the ChromaDB vector store.
    Expects the ChromaDB to be pre-generated by the ETL process (main_etl.py).
    Logs warnings and raises exceptions if the database is missing or empty.
    """
    embedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")

    if not os.path.exists(CHROMA_DB_DIR) or not os.listdir(CHROMA_DB_DIR):
        logger.error(f"ChromaDB not found or is empty at '{CHROMA_DB_DIR}'.")
        raise FileNotFoundError(
            f"ChromaDB not found or empty. Please run `python -m etl.main_etl` first to create it."
        )
    
    logger.info("Loading existing vector store from disk...")
    try:
        vectorstore = Chroma(persist_directory=CHROMA_DB_DIR, embedding_function=embedding_function)
        ids = vectorstore.get(include=[]).get('ids', [])
        
        if not ids:
            logger.warning(
                "Loaded vector store is empty. Please rerun `python -m etl.main_etl`. "
                "If this persists, delete the 'chroma_db' folder and regenerate."
            )
        else:
            logger.info(f"Vector store loaded successfully with {len(ids)} documents.")
            
    except Exception as e:
        logger.exception(f"Error loading ChromaDB from '{CHROMA_DB_DIR}': {e}")
        raise RuntimeError(
            "Failed to load ChromaDB. Consider rerunning `python -m etl.main_etl` or deleting the 'chroma_db' folder."
        ) from e

    return vectorstore